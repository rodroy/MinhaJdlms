/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.iso.acse;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.types.BerAnyNoDecode;

public class Association_information {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS,
			BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public BerAnyNoDecode axdr_frame = null;

	public Association_information() {
		id = identifier;
	}

	public Association_information(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public Association_information(BerAnyNoDecode axdr_frame) {
		id = identifier;
		this.axdr_frame = axdr_frame;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += axdr_frame.encode(os, false);
			// write tag {UNIVERSAL_CLASS, PRIMITIVE, 4}
			os.write(0x04);
			codeLength += 1;

			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.PRIMITIVE, 4)) {
			axdr_frame = new BerAnyNoDecode();
			subCodeLength += axdr_frame.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
		}
		throw new IOException(
				"Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("axdr_frame: ").append(axdr_frame);

		sb.append("}");
		return sb.toString();
	}

}
