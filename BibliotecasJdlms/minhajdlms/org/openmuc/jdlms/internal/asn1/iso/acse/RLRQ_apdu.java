/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.iso.acse;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerIdentifier;
import org.openmuc.jasn1.ber.BerLength;

public class RLRQ_apdu {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.APPLICATION_CLASS,
			BerIdentifier.CONSTRUCTED, 2);
	protected BerIdentifier id;

	public byte[] code = null;
	public Release_request_reason reason = null;

	public Association_information user_information = null;

	public RLRQ_apdu() {
		id = identifier;
	}

	public RLRQ_apdu(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public RLRQ_apdu(Release_request_reason reason, Association_information user_information) {
		id = identifier;
		this.reason = reason;
		this.user_information = user_information;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (user_information != null) {
				codeLength += user_information.encode(os, false);
				// write tag {CONTEXT_CLASS, CONSTRUCTED, 30}
				os.write(0xbe);
				codeLength += 1;
			}

			if (reason != null) {
				codeLength += reason.encode(os, false);
				// write tag {CONTEXT_CLASS, PRIMITIVE, 0}
				os.write(0x80);
				codeLength += 1;
			}

			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		if (length.val == 0) {
			return codeLength;
		}
		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
			reason = new Release_request_reason();
			subCodeLength += reason.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}

		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 30)) {
			user_information = new Association_information();
			subCodeLength += user_information.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
		}
		throw new IOException(
				"Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		boolean firstSelectedElement = true;
		if (reason != null) {
			sb.append("reason: ").append(reason);
			firstSelectedElement = false;
		}

		if (user_information != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("user_information: ").append(user_information);
			firstSelectedElement = false;
		}

		sb.append("}");
		return sb.toString();
	}

}
