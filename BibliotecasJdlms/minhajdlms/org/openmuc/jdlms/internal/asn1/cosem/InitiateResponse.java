/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrOptional;

public class InitiateResponse implements AxdrType {

	public byte[] code = null;
	public AxdrOptional<Integer8> negotiated_quality_of_service = new AxdrOptional<Integer8>(new Integer8(), false);

	public Unsigned8 negotiated_dlms_version_number = null;

	public Conformance negotiated_conformance = null;

	public Unsigned16 server_max_receive_pdu_size = null;

	public Integer16 vaa_name = null;

	public InitiateResponse() {
	}

	public InitiateResponse(byte[] code) {
		this.code = code;
	}

	public InitiateResponse(Integer8 negotiated_quality_of_service, Unsigned8 negotiated_dlms_version_number,
			Conformance negotiated_conformance, Unsigned16 server_max_receive_pdu_size, Integer16 vaa_name) {
		this.negotiated_quality_of_service.setValue(negotiated_quality_of_service);
		this.negotiated_dlms_version_number = negotiated_dlms_version_number;
		this.negotiated_conformance = negotiated_conformance;
		this.server_max_receive_pdu_size = server_max_receive_pdu_size;
		this.vaa_name = vaa_name;
	}

	@Override
	public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				axdrOStream.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += vaa_name.encode(axdrOStream);

			codeLength += server_max_receive_pdu_size.encode(axdrOStream);

			codeLength += negotiated_conformance.encode(axdrOStream);

			codeLength += negotiated_dlms_version_number.encode(axdrOStream);

			codeLength += negotiated_quality_of_service.encode(axdrOStream);

		}

		return codeLength;

	}

	@Override
	public int decode(InputStream iStream) throws IOException {
		int codeLength = 0;

		negotiated_quality_of_service = new AxdrOptional<Integer8>(new Integer8(), false);
		codeLength += negotiated_quality_of_service.decode(iStream);

		negotiated_dlms_version_number = new Unsigned8();
		codeLength += negotiated_dlms_version_number.decode(iStream);

		negotiated_conformance = new Conformance();
		codeLength += negotiated_conformance.decode(iStream);

		server_max_receive_pdu_size = new Unsigned16();
		codeLength += server_max_receive_pdu_size.decode(iStream);

		vaa_name = new Integer16();
		codeLength += vaa_name.decode(iStream);

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(axdrOStream);
		code = axdrOStream.getArray();
	}

	@Override
	public String toString() {
		return "sequence: {" + "negotiated_quality_of_service: " + negotiated_quality_of_service
				+ ", negotiated_dlms_version_number: " + negotiated_dlms_version_number + ", negotiated_conformance: "
				+ negotiated_conformance + ", server_max_receive_pdu_size: " + server_max_receive_pdu_size
				+ ", vaa_name: " + vaa_name + "}";
	}

}
