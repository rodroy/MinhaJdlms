/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrEnum;

public class Variable_Access_Specification implements AxdrType {

	public byte[] code = null;

	public static enum Choices {
		_ERR_NONE_SELECTED(-1),
		VARIABLE_NAME(2),
		PARAMETERIZED_ACCESS(4),;

		private int value;

		private Choices(int value) {
			this.value = value;
		}

		public int getValue() {
			return this.value;
		}

		public static Choices valueOf(long tagValue) {
			Choices[] values = Choices.values();

			for (Choices c : values) {
				if (c.value == tagValue) {
					return c;
				}
			}
			return _ERR_NONE_SELECTED;
		}
	}

	private Choices choice;

	public static class SubSeq_parameterized_access implements AxdrType {

		public byte[] code = null;
		public Integer16 variable_name = null;

		public Integer8 selector = null;

		public Data parameter = null;

		public SubSeq_parameterized_access() {
		}

		public SubSeq_parameterized_access(byte[] code) {
			this.code = code;
		}

		public SubSeq_parameterized_access(Integer16 variable_name, Integer8 selector, Data parameter) {
			this.variable_name = variable_name;
			this.selector = selector;
			this.parameter = parameter;
		}

		@Override
		public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {

			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					axdrOStream.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				codeLength += parameter.encode(axdrOStream);

				codeLength += selector.encode(axdrOStream);

				codeLength += variable_name.encode(axdrOStream);

			}

			return codeLength;

		}

		@Override
		public int decode(InputStream iStream) throws IOException {
			int codeLength = 0;

			variable_name = new Integer16();
			codeLength += variable_name.decode(iStream);

			selector = new Integer8();
			codeLength += selector.decode(iStream);

			parameter = new Data();
			codeLength += parameter.decode(iStream);

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(axdrOStream);
			code = axdrOStream.getArray();
		}

		@Override
		public String toString() {
			return "sequence: {" + "variable_name: " + variable_name + ", selector: " + selector + ", parameter: "
					+ parameter + "}";
		}

	}

	public Integer16 variable_name = null;

	public SubSeq_parameterized_access parameterized_access = null;

	public Variable_Access_Specification() {
	}

	public Variable_Access_Specification(byte[] code) {
		this.code = code;
	}

	@Override
	public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {
		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				axdrOStream.write(code[i]);
			}
			return code.length;

		}
		if (choice == Choices._ERR_NONE_SELECTED) {
			throw new IOException("Error encoding AxdrChoice: No item in choice was selected.");
		}

		int codeLength = 0;

		if (choice == Choices.PARAMETERIZED_ACCESS) {
			codeLength += parameterized_access.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(4);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.VARIABLE_NAME) {
			codeLength += variable_name.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(2);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		// This block should be unreachable
		throw new IOException("Error encoding AxdrChoice: No item in choice was encoded.");
	}

	@Override
	public int decode(InputStream iStream) throws IOException {
		int codeLength = 0;
		AxdrEnum choosen = new AxdrEnum();

		codeLength += choosen.decode(iStream);
		resetChoices();
		this.choice = Choices.valueOf(choosen.getValue());

		if (choice == Choices.VARIABLE_NAME) {
			variable_name = new Integer16();
			codeLength += variable_name.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.PARAMETERIZED_ACCESS) {
			parameterized_access = new SubSeq_parameterized_access();
			codeLength += parameterized_access.decode(iStream);
			return codeLength;
		}

		throw new IOException("Error decoding AxdrChoice: Identifier matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(axdrOStream);
		code = axdrOStream.getArray();
	}

	public Choices getChoiceIndex() {
		return this.choice;
	}

	public void setvariable_name(Integer16 newVal) {
		resetChoices();
		choice = Choices.VARIABLE_NAME;
		variable_name = newVal;
	}

	public void setparameterized_access(SubSeq_parameterized_access newVal) {
		resetChoices();
		choice = Choices.PARAMETERIZED_ACCESS;
		parameterized_access = newVal;
	}

	private void resetChoices() {
		choice = Choices._ERR_NONE_SELECTED;
		variable_name = null;
		parameterized_access = null;
	}

	@Override
	public String toString() {
		if (choice == Choices.VARIABLE_NAME) {
			return "choice: {variable_name: " + variable_name + "}";
		}

		if (choice == Choices.PARAMETERIZED_ACCESS) {
			return "choice: {parameterized_access: " + parameterized_access + "}";
		}

		return "unknown";
	}

}
