/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrBoolean;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrEnum;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrOctetString;

public class DataBlock_G implements AxdrType {

	public static class SubChoice_result implements AxdrType {

		public byte[] code = null;

		public static enum Choices {
			_ERR_NONE_SELECTED(-1),
			RAW_DATA(0),
			DATA_ACCESS_RESULT(1),;

			private int value;

			private Choices(int value) {
				this.value = value;
			}

			public int getValue() {
				return this.value;
			}

			public static Choices valueOf(long tagValue) {
				Choices[] values = Choices.values();

				for (Choices c : values) {
					if (c.value == tagValue) {
						return c;
					}
				}
				return _ERR_NONE_SELECTED;
			}
		}

		private Choices choice;

		public AxdrOctetString raw_data = null;

		public AxdrEnum data_access_result = null;

		public SubChoice_result() {
		}

		public SubChoice_result(byte[] code) {
			this.code = code;
		}

		@Override
		public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {
			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					axdrOStream.write(code[i]);
				}
				return code.length;

			}
			if (choice == Choices._ERR_NONE_SELECTED) {
				throw new IOException("Error encoding AxdrChoice: No item in choice was selected.");
			}

			int codeLength = 0;

			if (choice == Choices.DATA_ACCESS_RESULT) {
				codeLength += data_access_result.encode(axdrOStream);
				AxdrEnum c = new AxdrEnum(1);
				codeLength += c.encode(axdrOStream);
				return codeLength;
			}

			if (choice == Choices.RAW_DATA) {
				codeLength += raw_data.encode(axdrOStream);
				AxdrEnum c = new AxdrEnum(0);
				codeLength += c.encode(axdrOStream);
				return codeLength;
			}

			// This block should be unreachable
			throw new IOException("Error encoding AxdrChoice: No item in choice was encoded.");
		}

		@Override
		public int decode(InputStream iStream) throws IOException {
			int codeLength = 0;
			AxdrEnum choosen = new AxdrEnum();

			codeLength += choosen.decode(iStream);
			resetChoices();
			this.choice = Choices.valueOf(choosen.getValue());

			if (choice == Choices.RAW_DATA) {
				raw_data = new AxdrOctetString();
				codeLength += raw_data.decode(iStream);
				return codeLength;
			}

			if (choice == Choices.DATA_ACCESS_RESULT) {
				data_access_result = new AxdrEnum();
				codeLength += data_access_result.decode(iStream);
				return codeLength;
			}

			throw new IOException("Error decoding AxdrChoice: Identifier matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(axdrOStream);
			code = axdrOStream.getArray();
		}

		public Choices getChoiceIndex() {
			return this.choice;
		}

		public void setraw_data(AxdrOctetString newVal) {
			resetChoices();
			choice = Choices.RAW_DATA;
			raw_data = newVal;
		}

		public void setdata_access_result(AxdrEnum newVal) {
			resetChoices();
			choice = Choices.DATA_ACCESS_RESULT;
			data_access_result = newVal;
		}

		private void resetChoices() {
			choice = Choices._ERR_NONE_SELECTED;
			raw_data = null;
			data_access_result = null;
		}

		@Override
		public String toString() {
			if (choice == Choices.RAW_DATA) {
				return "choice: {raw_data: " + raw_data + "}";
			}

			if (choice == Choices.DATA_ACCESS_RESULT) {
				return "choice: {data_access_result: " + data_access_result + "}";
			}

			return "unknown";
		}

	}

	public byte[] code = null;
	public AxdrBoolean last_block = null;

	public Unsigned32 block_number = null;

	public SubChoice_result result = null;

	public DataBlock_G() {
	}

	public DataBlock_G(byte[] code) {
		this.code = code;
	}

	public DataBlock_G(AxdrBoolean last_block, Unsigned32 block_number, SubChoice_result result) {
		this.last_block = last_block;
		this.block_number = block_number;
		this.result = result;
	}

	@Override
	public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				axdrOStream.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += result.encode(axdrOStream);

			codeLength += block_number.encode(axdrOStream);

			codeLength += last_block.encode(axdrOStream);

		}

		return codeLength;

	}

	@Override
	public int decode(InputStream iStream) throws IOException {
		int codeLength = 0;

		last_block = new AxdrBoolean();
		codeLength += last_block.decode(iStream);

		block_number = new Unsigned32();
		codeLength += block_number.decode(iStream);

		result = new SubChoice_result();
		codeLength += result.decode(iStream);

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(axdrOStream);
		code = axdrOStream.getArray();
	}

	@Override
	public String toString() {
		return "sequence: {" + "last_block: " + last_block + ", block_number: " + block_number + ", result: " + result
				+ "}";
	}

}
