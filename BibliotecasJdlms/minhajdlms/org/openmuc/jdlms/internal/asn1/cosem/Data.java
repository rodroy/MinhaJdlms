/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrBitString;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrBoolean;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrEnum;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrNull;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrOctetString;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrSequenceOf;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrVisibleString;

public class Data implements AxdrType {

	public byte[] code = null;

	public static enum Choices {
		_ERR_NONE_SELECTED(-1),
		NULL_DATA(0),
		ARRAY(1),
		STRUCTURE(2),
		BOOL(3),
		BIT_STRING(4),
		DOUBLE_LONG(5),
		DOUBLE_LONG_UNSIGNED(6),
		OCTET_STRING(9),
		VISIBLE_STRING(10),
		BCD(13),
		INTEGER(15),
		LONG_INTEGER(16),
		UNSIGNED(17),
		LONG_UNSIGNED(18),
		COMPACT_ARRAY(19),
		LONG64(20),
		LONG64_UNSIGNED(21),
		ENUMERATE(22),
		FLOAT32(23),
		FLOAT64(24),
		DATE_TIME(25),
		DATE(26),
		TIME(27),
		DONT_CARE(255),;

		private int value;

		private Choices(int value) {
			this.value = value;
		}

		public int getValue() {
			return this.value;
		}

		public static Choices valueOf(long tagValue) {
			Choices[] values = Choices.values();

			for (Choices c : values) {
				if (c.value == tagValue) {
					return c;
				}
			}
			return _ERR_NONE_SELECTED;
		}
	}

	private Choices choice;

	public static class SubSeqOf_array extends AxdrSequenceOf<Data> {

		@Override
		protected Data createListElement() {
			return new Data();
		}

		protected SubSeqOf_array(int length) {
			super(length);
		}

		public SubSeqOf_array() {
		} // Call empty base constructor

	}

	public static class SubSeqOf_structure extends AxdrSequenceOf<Data> {

		@Override
		protected Data createListElement() {
			return new Data();
		}

		protected SubSeqOf_structure(int length) {
			super(length);
		}

		public SubSeqOf_structure() {
		} // Call empty base constructor

	}

	public static class SubSeq_compact_array implements AxdrType {

		public byte[] code = null;
		public TypeDescription contents_description = null;

		public AxdrOctetString array_contents = null;

		public SubSeq_compact_array() {
		}

		public SubSeq_compact_array(byte[] code) {
			this.code = code;
		}

		public SubSeq_compact_array(TypeDescription contents_description, AxdrOctetString array_contents) {
			this.contents_description = contents_description;
			this.array_contents = array_contents;
		}

		@Override
		public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {

			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					axdrOStream.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				codeLength += array_contents.encode(axdrOStream);

				codeLength += contents_description.encode(axdrOStream);

			}

			return codeLength;

		}

		@Override
		public int decode(InputStream iStream) throws IOException {
			int codeLength = 0;

			contents_description = new TypeDescription();
			codeLength += contents_description.decode(iStream);

			array_contents = new AxdrOctetString();
			codeLength += array_contents.decode(iStream);

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(axdrOStream);
			code = axdrOStream.getArray();
		}

		@Override
		public String toString() {
			return "sequence: {" + "contents_description: " + contents_description + ", array_contents: "
					+ array_contents + "}";
		}

	}

	public AxdrNull null_data = null;

	public SubSeqOf_array array = null;

	public SubSeqOf_structure structure = null;

	public AxdrBoolean bool = null;

	public AxdrBitString bit_string = null;

	public Integer32 double_long = null;

	public Unsigned32 double_long_unsigned = null;

	public AxdrOctetString octet_string = null;

	public AxdrVisibleString visible_string = null;

	public Integer8 bcd = null;

	public Integer8 integer = null;

	public Integer16 long_integer = null;

	public Unsigned8 unsigned = null;

	public Unsigned16 long_unsigned = null;

	public SubSeq_compact_array compact_array = null;

	public Integer64 long64 = null;

	public Unsigned64 long64_unsigned = null;

	public Enum enumerate = null;

	public AxdrOctetString float32 = null;

	public AxdrOctetString float64 = null;

	public AxdrOctetString date_time = null;

	public AxdrOctetString date = null;

	public AxdrOctetString time = null;

	public AxdrNull dont_care = null;

	public Data() {
	}

	public Data(byte[] code) {
		this.code = code;
	}

	@Override
	public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {
		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				axdrOStream.write(code[i]);
			}
			return code.length;

		}
		if (choice == Choices._ERR_NONE_SELECTED) {
			throw new IOException("Error encoding AxdrChoice: No item in choice was selected.");
		}

		int codeLength = 0;

		if (choice == Choices.DONT_CARE) {
			codeLength += dont_care.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(255);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.TIME) {
			codeLength += time.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(27);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.DATE) {
			codeLength += date.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(26);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.DATE_TIME) {
			codeLength += date_time.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(25);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.FLOAT64) {
			codeLength += float64.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(24);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.FLOAT32) {
			codeLength += float32.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(23);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.ENUMERATE) {
			codeLength += enumerate.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(22);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.LONG64_UNSIGNED) {
			codeLength += long64_unsigned.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(21);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.LONG64) {
			codeLength += long64.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(20);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.COMPACT_ARRAY) {
			codeLength += compact_array.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(19);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.LONG_UNSIGNED) {
			codeLength += long_unsigned.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(18);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.UNSIGNED) {
			codeLength += unsigned.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(17);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.LONG_INTEGER) {
			codeLength += long_integer.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(16);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.INTEGER) {
			codeLength += integer.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(15);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.BCD) {
			codeLength += bcd.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(13);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.VISIBLE_STRING) {
			codeLength += visible_string.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(10);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.OCTET_STRING) {
			codeLength += octet_string.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(9);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.DOUBLE_LONG_UNSIGNED) {
			codeLength += double_long_unsigned.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(6);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.DOUBLE_LONG) {
			codeLength += double_long.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(5);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.BIT_STRING) {
			codeLength += bit_string.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(4);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.BOOL) {
			codeLength += bool.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(3);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.STRUCTURE) {
			codeLength += structure.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(2);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.ARRAY) {
			codeLength += array.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(1);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		if (choice == Choices.NULL_DATA) {
			codeLength += null_data.encode(axdrOStream);
			AxdrEnum c = new AxdrEnum(0);
			codeLength += c.encode(axdrOStream);
			return codeLength;
		}

		// This block should be unreachable
		throw new IOException("Error encoding AxdrChoice: No item in choice was encoded.");
	}

	@Override
	public int decode(InputStream iStream) throws IOException {
		int codeLength = 0;
		AxdrEnum choosen = new AxdrEnum();

		codeLength += choosen.decode(iStream);
		resetChoices();
		this.choice = Choices.valueOf(choosen.getValue());

		if (choice == Choices.NULL_DATA) {
			null_data = new AxdrNull();
			codeLength += null_data.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.ARRAY) {
			array = new SubSeqOf_array();
			codeLength += array.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.STRUCTURE) {
			structure = new SubSeqOf_structure();
			codeLength += structure.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.BOOL) {
			bool = new AxdrBoolean();
			codeLength += bool.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.BIT_STRING) {
			bit_string = new AxdrBitString();
			codeLength += bit_string.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.DOUBLE_LONG) {
			double_long = new Integer32();
			codeLength += double_long.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.DOUBLE_LONG_UNSIGNED) {
			double_long_unsigned = new Unsigned32();
			codeLength += double_long_unsigned.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.OCTET_STRING) {
			octet_string = new AxdrOctetString();
			codeLength += octet_string.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.VISIBLE_STRING) {
			visible_string = new AxdrVisibleString();
			codeLength += visible_string.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.BCD) {
			bcd = new Integer8();
			codeLength += bcd.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.INTEGER) {
			integer = new Integer8();
			codeLength += integer.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.LONG_INTEGER) {
			long_integer = new Integer16();
			codeLength += long_integer.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.UNSIGNED) {
			unsigned = new Unsigned8();
			codeLength += unsigned.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.LONG_UNSIGNED) {
			long_unsigned = new Unsigned16();
			codeLength += long_unsigned.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.COMPACT_ARRAY) {
			compact_array = new SubSeq_compact_array();
			codeLength += compact_array.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.LONG64) {
			long64 = new Integer64();
			codeLength += long64.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.LONG64_UNSIGNED) {
			long64_unsigned = new Unsigned64();
			codeLength += long64_unsigned.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.ENUMERATE) {
			enumerate = new Enum();
			codeLength += enumerate.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.FLOAT32) {
			float32 = new AxdrOctetString();
			codeLength += float32.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.FLOAT64) {
			float64 = new AxdrOctetString();
			codeLength += float64.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.DATE_TIME) {
			date_time = new AxdrOctetString();
			codeLength += date_time.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.DATE) {
			date = new AxdrOctetString();
			codeLength += date.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.TIME) {
			time = new AxdrOctetString();
			codeLength += time.decode(iStream);
			return codeLength;
		}

		if (choice == Choices.DONT_CARE) {
			dont_care = new AxdrNull();
			codeLength += dont_care.decode(iStream);
			return codeLength;
		}

		throw new IOException("Error decoding AxdrChoice: Identifier matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(axdrOStream);
		code = axdrOStream.getArray();
	}

	public Choices getChoiceIndex() {
		return this.choice;
	}

	public void setnull_data(AxdrNull newVal) {
		resetChoices();
		choice = Choices.NULL_DATA;
		null_data = newVal;
	}

	public void setarray(SubSeqOf_array newVal) {
		resetChoices();
		choice = Choices.ARRAY;
		array = newVal;
	}

	public void setstructure(SubSeqOf_structure newVal) {
		resetChoices();
		choice = Choices.STRUCTURE;
		structure = newVal;
	}

	public void setbool(AxdrBoolean newVal) {
		resetChoices();
		choice = Choices.BOOL;
		bool = newVal;
	}

	public void setbit_string(AxdrBitString newVal) {
		resetChoices();
		choice = Choices.BIT_STRING;
		bit_string = newVal;
	}

	public void setdouble_long(Integer32 newVal) {
		resetChoices();
		choice = Choices.DOUBLE_LONG;
		double_long = newVal;
	}

	public void setdouble_long_unsigned(Unsigned32 newVal) {
		resetChoices();
		choice = Choices.DOUBLE_LONG_UNSIGNED;
		double_long_unsigned = newVal;
	}

	public void setoctet_string(AxdrOctetString newVal) {
		resetChoices();
		choice = Choices.OCTET_STRING;
		octet_string = newVal;
	}

	public void setvisible_string(AxdrVisibleString newVal) {
		resetChoices();
		choice = Choices.VISIBLE_STRING;
		visible_string = newVal;
	}

	public void setbcd(Integer8 newVal) {
		resetChoices();
		choice = Choices.BCD;
		bcd = newVal;
	}

	public void setinteger(Integer8 newVal) {
		resetChoices();
		choice = Choices.INTEGER;
		integer = newVal;
	}

	public void setlong_integer(Integer16 newVal) {
		resetChoices();
		choice = Choices.LONG_INTEGER;
		long_integer = newVal;
	}

	public void setunsigned(Unsigned8 newVal) {
		resetChoices();
		choice = Choices.UNSIGNED;
		unsigned = newVal;
	}

	public void setlong_unsigned(Unsigned16 newVal) {
		resetChoices();
		choice = Choices.LONG_UNSIGNED;
		long_unsigned = newVal;
	}

	public void setcompact_array(SubSeq_compact_array newVal) {
		resetChoices();
		choice = Choices.COMPACT_ARRAY;
		compact_array = newVal;
	}

	public void setlong64(Integer64 newVal) {
		resetChoices();
		choice = Choices.LONG64;
		long64 = newVal;
	}

	public void setlong64_unsigned(Unsigned64 newVal) {
		resetChoices();
		choice = Choices.LONG64_UNSIGNED;
		long64_unsigned = newVal;
	}

	public void setenumerate(Enum newVal) {
		resetChoices();
		choice = Choices.ENUMERATE;
		enumerate = newVal;
	}

	public void setfloat32(AxdrOctetString newVal) {
		resetChoices();
		choice = Choices.FLOAT32;
		float32 = newVal;
	}

	public void setfloat64(AxdrOctetString newVal) {
		resetChoices();
		choice = Choices.FLOAT64;
		float64 = newVal;
	}

	public void setdate_time(AxdrOctetString newVal) {
		resetChoices();
		choice = Choices.DATE_TIME;
		date_time = newVal;
	}

	public void setdate(AxdrOctetString newVal) {
		resetChoices();
		choice = Choices.DATE;
		date = newVal;
	}

	public void settime(AxdrOctetString newVal) {
		resetChoices();
		choice = Choices.TIME;
		time = newVal;
	}

	public void setdont_care(AxdrNull newVal) {
		resetChoices();
		choice = Choices.DONT_CARE;
		dont_care = newVal;
	}

	private void resetChoices() {
		choice = Choices._ERR_NONE_SELECTED;
		null_data = null;
		array = null;
		structure = null;
		bool = null;
		bit_string = null;
		double_long = null;
		double_long_unsigned = null;
		octet_string = null;
		visible_string = null;
		bcd = null;
		integer = null;
		long_integer = null;
		unsigned = null;
		long_unsigned = null;
		compact_array = null;
		long64 = null;
		long64_unsigned = null;
		enumerate = null;
		float32 = null;
		float64 = null;
		date_time = null;
		date = null;
		time = null;
		dont_care = null;
	}

	@Override
	public String toString() {
		if (choice == Choices.NULL_DATA) {
			return "choice: {null_data: " + null_data + "}";
		}

		if (choice == Choices.ARRAY) {
			return "choice: {array: " + array + "}";
		}

		if (choice == Choices.STRUCTURE) {
			return "choice: {structure: " + structure + "}";
		}

		if (choice == Choices.BOOL) {
			return "choice: {bool: " + bool + "}";
		}

		if (choice == Choices.BIT_STRING) {
			return "choice: {bit_string: " + bit_string + "}";
		}

		if (choice == Choices.DOUBLE_LONG) {
			return "choice: {double_long: " + double_long + "}";
		}

		if (choice == Choices.DOUBLE_LONG_UNSIGNED) {
			return "choice: {double_long_unsigned: " + double_long_unsigned + "}";
		}

		if (choice == Choices.OCTET_STRING) {
			return "choice: {octet_string: " + octet_string + "}";
		}

		if (choice == Choices.VISIBLE_STRING) {
			return "choice: {visible_string: " + visible_string + "}";
		}

		if (choice == Choices.BCD) {
			return "choice: {bcd: " + bcd + "}";
		}

		if (choice == Choices.INTEGER) {
			return "choice: {integer: " + integer + "}";
		}

		if (choice == Choices.LONG_INTEGER) {
			return "choice: {long_integer: " + long_integer + "}";
		}

		if (choice == Choices.UNSIGNED) {
			return "choice: {unsigned: " + unsigned + "}";
		}

		if (choice == Choices.LONG_UNSIGNED) {
			return "choice: {long_unsigned: " + long_unsigned + "}";
		}

		if (choice == Choices.COMPACT_ARRAY) {
			return "choice: {compact_array: " + compact_array + "}";
		}

		if (choice == Choices.LONG64) {
			return "choice: {long64: " + long64 + "}";
		}

		if (choice == Choices.LONG64_UNSIGNED) {
			return "choice: {long64_unsigned: " + long64_unsigned + "}";
		}

		if (choice == Choices.ENUMERATE) {
			return "choice: {enumerate: " + enumerate + "}";
		}

		if (choice == Choices.FLOAT32) {
			return "choice: {float32: " + float32 + "}";
		}

		if (choice == Choices.FLOAT64) {
			return "choice: {float64: " + float64 + "}";
		}

		if (choice == Choices.DATE_TIME) {
			return "choice: {date_time: " + date_time + "}";
		}

		if (choice == Choices.DATE) {
			return "choice: {date: " + date + "}";
		}

		if (choice == Choices.TIME) {
			return "choice: {time: " + time + "}";
		}

		if (choice == Choices.DONT_CARE) {
			return "choice: {dont_care: " + dont_care + "}";
		}

		return "unknown";
	}

}
